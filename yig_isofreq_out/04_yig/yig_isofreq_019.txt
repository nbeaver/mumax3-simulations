
// Based on Copus, et al. 2022
// https://doi.org/10.1063/5.0101394
f := 3730000000.0      // excitation freq       [Hz]
bstat := 0.0327    // static field          [T]
amp := 0.0002     // excitation amplitude  [T_p]

// Already defined, so don't use :=
alpha   = 0.005
Ku1     = 0.0
Aex     = 4.15e-12
Msat    = 160000.0

Nx := 1024       // number of cells in x-direction
Ny := 1024       // number of cells in y-direction
Nz := 1          // number of cells in z-direction
c := 5e-9        // cell width           [m]
d := 1.3e-07         // cell height          [m]

setgridsize(Nx, Ny, Nz)
setcellsize(c, c, d)

//save starting conditions
save(regions)
save(Msat)
save(exchCoupling)

// relax to static field
// static field in x direction
B_ext = vector(bstat, 0, 0)
m = uniform(1,0,0)

// Remove surface charges from left (mx=+1) and right (mx=+1) sides.
// Do this before running relax().
BoundaryRegion := 0
MagLeft        := 1
MagRight       := 1
ext_rmSurfaceCharge(BoundaryRegion, MagLeft, MagRight)

// relax M to x direction
relax() // high-energy states best minimized by relax() 
// save starting magnetization
save(m)

Snapshot(alpha)
Snapshot(Ku1)
Snapshot(Msat)
Snapshot(Regions)

// mask for excitation field
mask1 := newVectorMask(Nx, Ny, Nz)

i_0 := (Nx/2)-1
j_0 := (Ny/2)-1
k_0 := 0
for i := 0; i < 2; i++ {
  for j := 0; j < 2; j++ {
    for k := 0; k < 1; k++ {
      ii := i + i_0
      jj := j + j_0
      kk := k + k_0
      r := index2coord(ii, jj, kk)
      x := r.X()
      y := r.Y()
      print(i, j, k, ii, jj, kk, x, y)
      mask1.setVector(ii, jj, kk, Vector(0.0, 0.0, 1.0))
    }
  }
}
B_ext.add(mask1, amp*sin(2*pi*f*t))

//Simulation Time
points    := 10
// time step, recall f_Nyquist = 1/(2 dt)
tstep     := 210e-12
simtime   := tstep * points

//save m_full as .ovf
autosave(m_full, tstep)

// limit max solver step to avoid missing points in fft
maxdt = 1.0e-12

// run simulation
run(simtime)
